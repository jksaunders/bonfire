import { LayoutProps } from './Layout';

export type AlignCombinations =
  | '_'
  | 'center'
  | 'start'
  | 'flex-end'
  | 'flex-start'
  | 'end'
  | 'content-center'
  | 'content-start'
  | 'content-flex-end'
  | 'content-flex-start'
  | 'content-end'
  | 'content-space-between'
  | 'content-space-around'
  | 'content-space-evenly'
  | 'content-stretch'
  | 'center _'
  | 'center center'
  | 'center start'
  | 'center flex-end'
  | 'center flex-start'
  | 'center end'
  | 'center content-center'
  | 'center content-start'
  | 'center content-flex-end'
  | 'center content-flex-start'
  | 'center content-end'
  | 'center content-space-between'
  | 'center content-space-around'
  | 'center content-space-evenly'
  | 'center content-stretch'
  | 'start _'
  | 'start center'
  | 'start start'
  | 'start flex-end'
  | 'start flex-start'
  | 'start end'
  | 'start content-center'
  | 'start content-start'
  | 'start content-flex-end'
  | 'start content-flex-start'
  | 'start content-end'
  | 'start content-space-between'
  | 'start content-space-around'
  | 'start content-space-evenly'
  | 'start content-stretch'
  | 'flex-end _'
  | 'flex-end center'
  | 'flex-end start'
  | 'flex-end flex-end'
  | 'flex-end flex-start'
  | 'flex-end end'
  | 'flex-end content-center'
  | 'flex-end content-start'
  | 'flex-end content-flex-end'
  | 'flex-end content-flex-start'
  | 'flex-end content-end'
  | 'flex-end content-space-between'
  | 'flex-end content-space-around'
  | 'flex-end content-space-evenly'
  | 'flex-end content-stretch'
  | 'flex-start _'
  | 'flex-start center'
  | 'flex-start start'
  | 'flex-start flex-end'
  | 'flex-start flex-start'
  | 'flex-start end'
  | 'flex-start content-center'
  | 'flex-start content-start'
  | 'flex-start content-flex-end'
  | 'flex-start content-flex-start'
  | 'flex-start content-end'
  | 'flex-start content-space-between'
  | 'flex-start content-space-around'
  | 'flex-start content-space-evenly'
  | 'flex-start content-stretch'
  | 'end _'
  | 'end center'
  | 'end start'
  | 'end flex-end'
  | 'end flex-start'
  | 'end end'
  | 'end content-center'
  | 'end content-start'
  | 'end content-flex-end'
  | 'end content-flex-start'
  | 'end content-end'
  | 'end content-space-between'
  | 'end content-space-around'
  | 'end content-space-evenly'
  | 'end content-stretch'
  | 'content-center _'
  | 'content-center center'
  | 'content-center start'
  | 'content-center flex-end'
  | 'content-center flex-start'
  | 'content-center end'
  | 'content-center content-center'
  | 'content-center content-start'
  | 'content-center content-flex-end'
  | 'content-center content-flex-start'
  | 'content-center content-end'
  | 'content-center content-space-between'
  | 'content-center content-space-around'
  | 'content-center content-space-evenly'
  | 'content-center content-stretch'
  | 'content-start _'
  | 'content-start center'
  | 'content-start start'
  | 'content-start flex-end'
  | 'content-start flex-start'
  | 'content-start end'
  | 'content-start content-center'
  | 'content-start content-start'
  | 'content-start content-flex-end'
  | 'content-start content-flex-start'
  | 'content-start content-end'
  | 'content-start content-space-between'
  | 'content-start content-space-around'
  | 'content-start content-space-evenly'
  | 'content-start content-stretch'
  | 'content-flex-end _'
  | 'content-flex-end center'
  | 'content-flex-end start'
  | 'content-flex-end flex-end'
  | 'content-flex-end flex-start'
  | 'content-flex-end end'
  | 'content-flex-end content-center'
  | 'content-flex-end content-start'
  | 'content-flex-end content-flex-end'
  | 'content-flex-end content-flex-start'
  | 'content-flex-end content-end'
  | 'content-flex-end content-space-between'
  | 'content-flex-end content-space-around'
  | 'content-flex-end content-space-evenly'
  | 'content-flex-end content-stretch'
  | 'content-flex-start _'
  | 'content-flex-start center'
  | 'content-flex-start start'
  | 'content-flex-start flex-end'
  | 'content-flex-start flex-start'
  | 'content-flex-start end'
  | 'content-flex-start content-center'
  | 'content-flex-start content-start'
  | 'content-flex-start content-flex-end'
  | 'content-flex-start content-flex-start'
  | 'content-flex-start content-end'
  | 'content-flex-start content-space-between'
  | 'content-flex-start content-space-around'
  | 'content-flex-start content-space-evenly'
  | 'content-flex-start content-stretch'
  | 'content-end _'
  | 'content-end center'
  | 'content-end start'
  | 'content-end flex-end'
  | 'content-end flex-start'
  | 'content-end end'
  | 'content-end content-center'
  | 'content-end content-start'
  | 'content-end content-flex-end'
  | 'content-end content-flex-start'
  | 'content-end content-end'
  | 'content-end content-space-between'
  | 'content-end content-space-around'
  | 'content-end content-space-evenly'
  | 'content-end content-stretch'
  | 'content-space-between _'
  | 'content-space-between center'
  | 'content-space-between start'
  | 'content-space-between flex-end'
  | 'content-space-between flex-start'
  | 'content-space-between end'
  | 'content-space-between content-center'
  | 'content-space-between content-start'
  | 'content-space-between content-flex-end'
  | 'content-space-between content-flex-start'
  | 'content-space-between content-end'
  | 'content-space-between content-space-between'
  | 'content-space-between content-space-around'
  | 'content-space-between content-space-evenly'
  | 'content-space-between content-stretch'
  | 'content-space-around _'
  | 'content-space-around center'
  | 'content-space-around start'
  | 'content-space-around flex-end'
  | 'content-space-around flex-start'
  | 'content-space-around end'
  | 'content-space-around content-center'
  | 'content-space-around content-start'
  | 'content-space-around content-flex-end'
  | 'content-space-around content-flex-start'
  | 'content-space-around content-end'
  | 'content-space-around content-space-between'
  | 'content-space-around content-space-around'
  | 'content-space-around content-space-evenly'
  | 'content-space-around content-stretch'
  | 'content-space-evenly _'
  | 'content-space-evenly center'
  | 'content-space-evenly start'
  | 'content-space-evenly flex-end'
  | 'content-space-evenly flex-start'
  | 'content-space-evenly end'
  | 'content-space-evenly content-center'
  | 'content-space-evenly content-start'
  | 'content-space-evenly content-flex-end'
  | 'content-space-evenly content-flex-start'
  | 'content-space-evenly content-end'
  | 'content-space-evenly content-space-between'
  | 'content-space-evenly content-space-around'
  | 'content-space-evenly content-space-evenly'
  | 'content-space-evenly content-stretch'
  | 'content-stretch _'
  | 'content-stretch center'
  | 'content-stretch start'
  | 'content-stretch flex-end'
  | 'content-stretch flex-start'
  | 'content-stretch end'
  | 'content-stretch content-center'
  | 'content-stretch content-start'
  | 'content-stretch content-flex-end'
  | 'content-stretch content-flex-start'
  | 'content-stretch content-end'
  | 'content-stretch content-space-between'
  | 'content-stretch content-space-around'
  | 'content-stretch content-space-evenly'
  | 'content-stretch content-stretch';

const parseAlignTargetValue = (
  alignProp: AlignCombinations
): { contentOrItemsKey: 'content' | 'items'; value: string } => ({
  contentOrItemsKey: alignProp.includes('content-') ? 'content' : 'items',
  value: `${alignProp}`.replace('items-', '').replace('content-', ''),
});

export const getAlignmentCss = (alignmentProp: AlignCombinations): string => {
  const [first, second] = alignmentProp.split(' ') as AlignCombinations[];
  let justifyResult = '';
  let alignResult = '';

  if (first !== '_') {
    const {
      contentOrItemsKey: firstContentOrItemsKey,
      value: firstValue,
    } = parseAlignTargetValue(first);
    justifyResult = `${firstContentOrItemsKey}: ${firstValue}`;
  }

  if (second == null) {
    alignResult = justifyResult;
  } else if (second !== '_') {
    const {
      contentOrItemsKey: secondContentOrItemsKey,
      value: secondValue,
    } = parseAlignTargetValue(second);
    alignResult = `${secondContentOrItemsKey}: ${secondValue}`;
  }

  return `
    ${alignResult && `align-${alignResult};`}
    ${justifyResult && `justify-${justifyResult};`}
  `;
};
